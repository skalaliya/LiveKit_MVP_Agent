[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "livekit_mvp_agent"
version = "0.1.0"
description = "Local EN/FR voice agent using faster-whisper, Ollama, Kokoro/Piper, integrated with LiveKit."
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Algorythmos", email = "contact@algorythmos.com" }
]
requires-python = ">=3.11"
dependencies = [
    "livekit-agents[mcp]>=0.8.0",
    "faster-whisper>=1.0.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "numpy>=1.24.0",
    "soundfile>=0.12.0",
    "torch>=2.0.0",
    "httpx>=0.25.0",
    "rich>=13.0.0",
    "click>=8.1.0",
    "uvloop>=0.19.0; sys_platform != 'win32'",
    "silero-vad>=5.1.0",
    "toml>=0.10.0",
    "pydub>=0.25.1",
    "websockets>=15.0.1",
    "python-dotenv>=1.1.1",
    "pyside6>=6.10.0",
    "sounddevice>=0.5.3",
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "python-multipart>=0.0.6",
]

[project.optional-dependencies]
tts = [
    "kokoro-tts>=0.1.0; python_version >= '3.11'",  # Optional TTS
    "piper-tts>=1.2.0",  # Fallback TTS
]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.7.0",
    "ruff>=0.1.0",
    "types-requests>=2.31.0",
    "types-toml>=0.10.0",
]

[project.scripts]
livekit-mvp-agent = "livekit_mvp_agent.app:main"

[project.urls]
Homepage = "https://github.com/algorythmos/livekit_mvp_agent"
Repository = "https://github.com/algorythmos/livekit_mvp_agent"
Issues = "https://github.com/algorythmos/livekit_mvp_agent/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/livekit_mvp_agent"]

[tool.hatch.build.targets.sdist]
include = [
    "src/",
    "config/",
    "scripts/",
    "tests/",
    "README.md",
    "LICENSE",
]

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.isort]
known-first-party = ["livekit_mvp_agent"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "faster_whisper.*",
    "silero_vad.*",
    "kokoro_tts.*",
    "piper_tts.*",
    "livekit.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "integration: marks tests as integration tests (require external services)",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/livekit_mvp_agent"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
