name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Lint with ruff
      run: uv run ruff check src/ tests/
    
    - name: Check formatting with ruff
      run: uv run ruff format --check src/ tests/
    
    - name: Type check with mypy
      run: uv run mypy src/ tests/
    
    - name: Run tests
      run: uv run pytest tests/ -v --tb=short
    
    - name: Test CLI help
      run: uv run -m livekit_mvp_agent.app --help
    
    - name: Test imports
      run: |
        uv run python -c "import livekit_mvp_agent; print('✓ Main package imports')"
        uv run python -c "from livekit_mvp_agent.config import Settings; print('✓ Config imports')"
        uv run python -c "from livekit_mvp_agent.adapters.stt_whisper import WhisperSTT; print('✓ STT imports')"
        uv run python -c "from livekit_mvp_agent.adapters.llm_ollama import OllamaLLM; print('✓ LLM imports')"
        uv run python -c "from livekit_mvp_agent.adapters.tts_kokoro import KokoroTTS; print('✓ TTS imports')"
        uv run python -c "from livekit_mvp_agent.adapters.vad_silero import SileroVAD; print('✓ VAD imports')"

  docker-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Test Docker Compose
      run: |
        # Test that docker-compose.yaml is valid
        docker compose config
        
        # Test Ollama service can start
        docker compose up -d ollama --wait || docker compose --profile cpu up -d ollama-cpu --wait
        
        # Check if Ollama is responsive
        timeout 60 bash -c 'until curl -s http://localhost:11434/api/version; do sleep 2; done'
        
        # Cleanup
        docker compose down

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Run security scan with safety
      run: |
        uv add --dev safety
        uv run safety check --json || true  # Don't fail on vulnerabilities for now
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified